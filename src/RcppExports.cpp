// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_deps_memo
List get_deps_memo(CharacterVector from, CharacterVector to, String pkg);
RcppExport SEXP _havel_get_deps_memo(SEXP fromSEXP, SEXP toSEXP, SEXP pkgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< String >::type pkg(pkgSEXP);
    rcpp_result_gen = Rcpp::wrap(get_deps_memo(from, to, pkg));
    return rcpp_result_gen;
END_RCPP
}
// get_region
IntegerVector get_region(NumericVector abs_th, NumericVector p2_th, IntegerVector p2_high, double pi);
RcppExport SEXP _havel_get_region(SEXP abs_thSEXP, SEXP p2_thSEXP, SEXP p2_highSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type abs_th(abs_thSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2_th(p2_thSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p2_high(p2_highSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(get_region(abs_th, p2_th, p2_high, pi));
    return rcpp_result_gen;
END_RCPP
}
// get_axy
DataFrame get_axy(IntegerVector reg, NumericVector xs, NumericVector xe, NumericVector ys, NumericVector ye, NumericVector th, NumericVector p2x, NumericVector p2y);
RcppExport SEXP _havel_get_axy(SEXP regSEXP, SEXP xsSEXP, SEXP xeSEXP, SEXP ysSEXP, SEXP yeSEXP, SEXP thSEXP, SEXP p2xSEXP, SEXP p2ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type reg(regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xe(xeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type th(thSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2x(p2xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2y(p2ySEXP);
    rcpp_result_gen = Rcpp::wrap(get_axy(reg, xs, xe, ys, ye, th, p2x, p2y));
    return rcpp_result_gen;
END_RCPP
}
// cc
CharacterVector cc(CharacterVector a, CharacterVector b);
RcppExport SEXP _havel_cc(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cc(a, b));
    return rcpp_result_gen;
END_RCPP
}
// get_n_ds_uniq
List get_n_ds_uniq(int n_group, int order, CharacterVector dir_deps, IntegerVector group, CharacterVector pkg, List ds_deps);
RcppExport SEXP _havel_get_n_ds_uniq(SEXP n_groupSEXP, SEXP orderSEXP, SEXP dir_depsSEXP, SEXP groupSEXP, SEXP pkgSEXP, SEXP ds_depsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_group(n_groupSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dir_deps(dir_depsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type pkg(pkgSEXP);
    Rcpp::traits::input_parameter< List >::type ds_deps(ds_depsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_n_ds_uniq(n_group, order, dir_deps, group, pkg, ds_deps));
    return rcpp_result_gen;
END_RCPP
}
// stress
double stress(NumericMatrix x, NumericMatrix D);
RcppExport SEXP _havel_stress(SEXP xSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(stress(x, D));
    return rcpp_result_gen;
END_RCPP
}
// stress_layout
NumericMatrix stress_layout(NumericMatrix y, NumericMatrix D, int iter, double tol);
RcppExport SEXP _havel_stress_layout(SEXP ySEXP, SEXP DSEXP, SEXP iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(stress_layout(y, D, iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_havel_get_deps_memo", (DL_FUNC) &_havel_get_deps_memo, 3},
    {"_havel_get_region", (DL_FUNC) &_havel_get_region, 4},
    {"_havel_get_axy", (DL_FUNC) &_havel_get_axy, 8},
    {"_havel_cc", (DL_FUNC) &_havel_cc, 2},
    {"_havel_get_n_ds_uniq", (DL_FUNC) &_havel_get_n_ds_uniq, 6},
    {"_havel_stress", (DL_FUNC) &_havel_stress, 2},
    {"_havel_stress_layout", (DL_FUNC) &_havel_stress_layout, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_havel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
